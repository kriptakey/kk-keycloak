Design motivation
=================

Tokenization basics
-------------------

At its core, tokenization is a process that modifies sensitive value and produces a benign token. Other systems
can then treat the token as a replacement of the original value, performing operations that is associated
with the original sensitive value, while the system that performs the tokenization can detokenize it to obtain
the underlying sensitive value.

Tokenization can be done in two ways: vault-based or vaultless. A vault-based tokenization engine essentially
keeps an internal lookup table so that it can produce tokens and quickly detokenize it. While this is quick and easy,
a vault-based tokenization's lookup table can grow extremely large as time goes on.

Kripta Key aims to keep as little state as possible. Hence, it provides vaultless tokenization instead.
However, but this comes at a cost:

*   Tokenization produces metadata that must be stored by the application.
*   Tokenization alters the length and the format of the sensitive data, which may be not expected by other systems.


Format-preserving encryption
----------------------------

One possible solution for a vaultless tokenization engine would be to use a format-preserving encryption,
instead of using AES to encrypt the sensitive value. Such a method has been published by NIST, providing
recommendations for block cipher modes of operations to accomplish format-preserving encryption. These
encryption methods are called FF1 and FF3-1.

However, research has shown that both FF1 and FF3-1 are insecure, and it is possible to perform
full key recovery attacks on these encryption methods. As a result, neither FF1 nor FF3-1 are implemented in OpenSSL.
To avoid providing cryptography implementation with known vulnerabilities, Kripta Key does not offer
format-preserving encryption via FF1 or FF3-1. Instead, Kripta Key provides an alternative vault-based engine
for format-preserving tokenization in the form of Kripta Key Tokenization Service.


What is Kripta Key Tokenization Service?
----------------------------------------

To reiterate, Kripta Key Tokenization Service (KK-TS) is a vault-based tokenization service, provided separately
from KK-Cryptoservice for customers who find the tokenization service provided by KK-Cryptoservice inadequate
for their needs. KK-TS interfaces with KK-Cryptoservice in the background, handling encryption-based tokenization
while providing additional API endpoints for format-preserving tokenization. As a result, KK-TS is capable
of providing vault-based, format-preserving tokenization that does not store the sensitive value anywhere in its vault.
This prevents data breaches even if the vault is compromised.

KK-TS organizes its vault by separating the tokenization parameters for each data domain, which is stored
under separate configuration IDs. Then, each data domain configuration is associated to a specific application
that has been registered to KK-Manager. KK-TS then uses the subject key identifier, which is obtained by hashing
the public key, to identify each application.

KK-TS should be deployed as a fault-tolerant system, to avoid a single point of failure. This is accomplished
by deploying several instances of KK-TS servers behind a load balancer that connects to a clustered database system,
to avoid data loss if one database instance is unreachable.
