E2EE for password-based authentication
======================================

For existing user authentication flows, E2EE can used to secure actions such as password reset and password
verification. The password should not be stored as is. Except for :ref:`e2ee-dev-guide/e2ee-password-auth:password translation`,
it is highly recommended that the password is hashed before sending it to the backend. The transport public key
secures the password in transit, while a prepared AES key secures the password at rest.

.. important::

    The Kripta Key admin **MUST** have generated a specific AES key to encrypt the passwords and/or
    the password hashes. This is called the permanent key.


Password reset
--------------

.. important::

    :ref:`e2ee-dev-guide/e2ee-prerequisites:e2ee pre-authentication` must have been done prior to executing this flow.

This flow is used to reset the user's password or PIN from the frontend.

The following are the steps to perform E2EE password reset:

#.  Frontend calls [SDK API function for hashing] from the SDK, hashing the user's password.
#.  Frontend calls ``e2eeEncrypt`` from the SDK, encrypting the hashed password using the transport public key
    and OAEP label established during pre-authentication.
#.  Frontend sends the user ID, the encrypted data block and its metadata, and the session ID to the backend.
#.  Backend fetches the OAEP label and wrapped transport private key from the session cache using the session ID.
#.  Backend calls ``e2ee/reencryptFromSessionKeyToPermanentKey`` from Kripta Key API, reencrypting the payload using the
    transport private key and the permanent key.
#.  Backend stores the user ID and the reencrypted data into its database.
#.  Backend invalidates the cache entry associated with the session ID.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == E2EE for Password Reset ==

    autonumber
    user -> client : enter new password
    client -> clientlib : call ""hash_func"", passing in password
    clientlib -> client : return hashed password
    client -> clientlib : call ""e2eeEncrypt"", passing in hashed password, transport public key and OAEP label
    clientlib -> client : return encrypted data block (EDB) and metadata
    client -> appserver : send user ID, EDB, metadata, and session ID
    appserver -> appserver : fetch OAEP label and wrapped transport private key from E2EE session cache by using session ID
    appserver -> kk : call ""e2ee/reencryptFromSessionKeyToPermanentKey"", passing in wrapping key ID, wrapped transport private key, OAEP label, EDB, and permanent key ID
    kk -> appserver : return reencrypted data
    appserver -> appserver : if successful, remove the session cache entry and store the reencrypted data into database
    appserver -> client : status

    @enduml

.. todo::

    TODO: Determine the name of the hashing function.

.. important::

    The cache invalidation step **MUST** be performed after a successful reset in order to prevent a
    :term:`replay attack`.


Password verification
---------------------

.. important::

    :ref:`e2ee-dev-guide/e2ee-prerequisites:e2ee pre-authentication` must have been done prior to executing this flow.

This flow is used to verify a user's password or PIN from the frontend.

The following are the steps to perform E2EE password verification:

#.  Frontend calls [SDK API function for hashing] from the SDK, hashing the user's password.
#.  Frontend calls ``e2eeEncrypt`` from the SDK, encrypting the hashed password using the transport public key
    and OAEP label established during pre-authentication.
#.  Frontend sends the user ID, the encrypted data block and its metadata, and the session ID to the backend.
#.  Backend fetches the OAEP label and wrapped transport private key from the session cache using the session ID.
#.  Backend fetches the stored data from its database.
#.  Backend calls ``e2ee/compare`` from Kripta Key API, comparing the encrypted payload and the stored data using the
    wrapped transport private key and the permanent key.
#.  If comparison is successful, backend invalidates the cache entry associated with the session ID.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == E2EE for Password Verification ==

    autonumber
    user -> client : enter password
    client -> clientlib : call ""hash_func"", passing in password
    clientlib -> client : return hashed password
    client -> clientlib : call ""e2eeEncrypt"", passing in hashed password, transport public key, and OAEP label
    clientlib -> client : return encrypted data block (EDB) and metadata
    client -> appserver : send user ID, EDB, metadata, and session ID
    appserver -> appserver : fetch OAEP label and wrapped transport private key from session cache by using session ID
    appserver -> appserver : fetch stored encrypted hash from DB
    appserver -> kk : call ""e2ee/compare"", passing in wrapping key ID, wrapped transport private key, OAEP label, encrypted data block, permanent key ID, and stored encrypted hash
    kk -> appserver : verification status
    appserver -> appserver : if successful, remove the session cache entry
    appserver -> client : status

    @enduml

.. important::

    The cache invalidation step **MUST** be performed after a successful verification in order to prevent a
    replay attack.


Password translation
--------------------

.. important::

    :ref:`e2ee-dev-guide/e2ee-prerequisites:e2ee pre-authentication` must have been done prior to executing this flow.

If the user's password is actually used by a legacy system or a third-party system that exists separately from the
backend as a PIN, then the developer would need to use the password translation flow, as this flow translates and/or
reencrypts the PIN to the appropriate format for the third-party system.

The following are the steps to perform password translation:

#.  Frontend calls ``e2eeEncrypt`` from the SDK, encrypting the PIN using the transport public key
    and OAEP label established during pre-authentication.
#.  Frontend sends the user ID, the encrypted data block and its metadata, and the session ID to the backend.
#.  Backend fetches the OAEP label and wrapped transport private key from the session cache using the session ID.
#.  Backend calls ``e2ee/reencryptFromSessionKeyToPermanentKey`` from Kripta Key API, reencrypting the payload
    using the transport private key and the encryption key of the target system.
#.  Backend sends the reencrypted PIN block to the target system.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE SDK" as clientlib
    end box
    box "Backend"
        participant "Business Micro Service" as appserver
        participant "Kripta Key" as kk
        participant "Core Banking" as corebanking
        participant "Payment HSM" as payshield
    end box

    == E2EE for PIN Translation ==

    autonumber
    user -> client : enter PIN
    client -> clientlib : call ""e2eeEncrypt"", passing in PIN, transport public key and OAEP label
    clientlib -> client : return encrypted PIN block
    client -> appserver : send user ID and encrypted PIN block
    appserver -> appserver : fetch OAEP label and wrapped transport private key from session cache by using session ID
    appserver -> kk : call ""e2ee/reencryptFromSessionKeyToPermanentKey"", passing in wrapping key ID, wrapped transport private key, OAEP label, encrypted PIN block, PIN format of target system, and key ID of target system's key
    kk -> appserver : Payment HSM PIN block
    appserver -> corebanking : PIN block
    corebanking -> payshield : PIN block
    payshield -> corebanking : status
    corebanking -> appserver : status
    appserver -> client : status

    @enduml
