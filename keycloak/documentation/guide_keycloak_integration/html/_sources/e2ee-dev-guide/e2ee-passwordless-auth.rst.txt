E2EE for passwordless authentication
====================================

If the end user has a suitable device, the developer may opt for passwordless authentication,
alleviating the need for the user to memorize or store another passphrase. Instead, authenticating the user
is delegated to the end user's device, via biometric or local PIN, as supported by the device. Hence,
"passwordless" reflects the user experience --- the encryption key generated by Kripta Key is still required (see :doc:`e2ee-password-auth`).

These flows require the end user's device's operating system to be Android 6.0, iOS 12.5, or newer.


Device registration
-------------------

This flow binds the user's device to the user's account, allowing the developer to delegate authentication to the
device's operating system.

.. important::

    Prior to running this flow, ensure the following:

    #.  The backend has been authenticated with :ref:`backend authentication <e2ee-dev-guide/e2ee-prerequisites:backend authentication>`.
    #.  The user has been authenticated using :doc:`password-based authentication <e2ee-password-auth>`.
    #.  :ref:`Client key <e2ee-dev-guide/e2ee-data-protection:client key establishment protocol>` has been established.
        This key MUST be protected with local device authentication.
    #.  The frontend MUST perform another :ref:`pre-authentication <e2ee-dev-guide/e2ee-prerequisites:e2ee pre-authentication>`
        right before the device registration flow.
    #.  The Kripta Key admin has generated a key pair and certificate associated with the backend. The public certificate
        **MUST** be pinned to the frontend.

The following are the steps to perform device registration:

#.  Frontend prompts biometric authentication from the user.
#.  Frontend calls ``generateDeviceIDKeypair`` from the SDK, generating an ECDSA key pair and a :term:`CSR`, to be signed
    by the backend.
#.  Frontend sends the CSR and the session ID to the backend.
#.  Backend calls ``cert/sign`` from Kripta Key API, signing the CSR using the private key associated with the app's
    certificate.
#.  Backend caches the device's public key with the session ID. Backend shall identify a device using its public key.
#.  Backend sends the signed request to the frontend.
#.  Frontend calls verifyCert from the SDK, verifying whether the request was signed using the private key corresponding
    to the pinned certificate.
#.  If verification is successful, store the device certificate. Otherwise, stop.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == Device Registration and Binding ==

    autonumber
    user -> client : start device binding process
    client -> user : prompt biometric authentication
    user -> client : authenticate local biometric (face, fingerprint, or fallback to local PIN)
    client -> clientlib : call ""generateDeviceIDKeypair""
    clientlib -> client : certificate signing request (CSR)
    client -> appserver : send session ID and CSR
    appserver -> kk : call ""cert/sign"", passing in CSR and key ID of the pinned certificate
    kk -> appserver : device certificate
    appserver -> appserver : cache device public key using the session ID
    appserver -> client : device certificate
    client -> clientlib : call ""verifyCert"" passing in device certificate and pinned certificate
    clientlib -> client : verification result
    client -> client : if verified, the store device certificate; otherwise, stop.

    @enduml


Device activation
-----------------

.. important::

    This flow **MUST** run immediately after :ref:`e2ee-dev-guide/e2ee-passwordless-auth:device registration`
    is done successfully.

The following are the steps to perform device activation:

#.  Frontend calls ``getDeviceBasedEncryptedPassword``, generating a new device-based password by setting the
    ``newPasswordKey`` parameter to ``true``.
#.  Frontend sends the user ID, the encrypted data block and its metadata, and the session ID to the backend.
#.  Backend fetches the OAEP label and wrapped transport private key from the session cache using the session ID.
#.  Backend calls ``e2ee/reencryptFromSessionKeyToPermanentKey`` from Kripta Key API, reencrypting the payload
    using the transport private key and the permanent key.
#.  Backend stores the user ID, the encrypted password, and the device's public key into its database.
#.  Backend invalidates the cache entry associated with the session ID.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == Device-Based Password Activation ==

    autonumber
    client -> clientlib : call ""generateDeviceBasedEncryptedPassword""
    clientlib -> client : return encrypted data block (EDB) and metadata
    client -> appserver : send user ID, EDB, metadata, and session ID
    appserver -> appserver : fetch OAEP label and wrapped private key from E2EE session cache by using session ID
    appserver -> kk : call ""e2ee/reencryptFromSessionKeyToPermanentKey"", passing in wrapping key ID, wrapped private key, OAEP label, encrypted data block, and password encryption key ID
    kk -> appserver : return stored encrypted password
    appserver -> appserver : store device public key, encrypted password and user ID together
    appserver -> client : update status/result

    @enduml


Passwordless authentication
---------------------------

After device registration and activation has been done, the frontend may authenticate the user using local device
authentication.

The following are the steps to perform passwordless authentication:

#.  Frontend prompts biometric authentication from the user.
#.  Frontend calls ``getDeviceBasedEncryptedPassword`` from the SDK, fetching the existing device-based password by
    setting the ``newPasswordKey`` parameter to ``false``.
#.  Frontend calls ``rnd`` from the SDK, generating 10 bytes of nonce.
#.  Frontend calls ``signByDeviceIDKeypair`` from the SDK, signing the nonce using the device's private key.
#.  Frontend sends the user ID, the encrypted data block and its metadata, the nonce, the signature, and the session ID
    to the backend.
#.  Backend fetches the OAEP label and wrapped transport private key from the session cache using the session ID.
#.  Backend fetches the stored encrypted password and the device's public key from its database.
#.  Backend calls ``appstored/verify`` from Kripta Key API, verifying that the nonce was signed using the associated
    private key.
#.  If verification fails, stop.
#.  Backend calls ``e2ee/compare``, comparing the encrypted data block and the stored encrypted data using the wrapped
    transport private key and the permanent key.
#.  If comparison is successful, backend invalidates the cache entry associated with the session ID.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == Device and User Authentication ==

    autonumber
    user -> client : start app
    client -> user : prompt biometric authentication
    user -> client : authenticate local biometric
    client -> clientlib : call ""getDeviceBasedEncryptedPassword""
    clientlib -> client : return encrypted data block (EDB) and metadata
    client -> clientlib : call ""rnd"", generating 10 bytes of nonce
    clientlib -> client : nonce
    client -> clientlib : call ""signByDeviceIDKeypair"", passing in nonce
    clientlib -> client : signature
    client -> appserver : send user ID, EDB, metadata, nonce, signature, and session ID
    appserver -> appserver : fetch OAEP label and wrapped private key from E2EE session cache by using session ID
    appserver -> appserver : fetch stored encrypted password and device public key from database
    appserver -> kk : call ""appstored/verify"", passing in nonce, signature, and device public key
    kk -> appserver : verification result; if not verified, then stop.
    appserver -> kk : call ""e2ee/compare"", passing in wrapping key ID, wrapped private key, OAEP label, encrypted PIN block, password encryption key ID, stored encrypted password
    kk -> appserver : verification result
    appserver -> client : verification result

    @enduml


Transaction signing
-------------------

This flow is intended for actions that must be specifically authorized by the user. Device binding is required for this
E2EE flow. As such, device registration and activation MUST have been done successfully prior to performing this flow.

The following are the steps to perform transaction signing:

#.  Frontend sends data relevant to the transaction to the backend.
#.  Backend calls ``rnd`` from Kripta Key API, generating some amount of random bytes of nonce. We recommend 10 bytes
    of nonce.
#.  Backend combines the received data and the nonce to form an OTP. We recommend 6 to 8 digits for the OTP's length.
#.  Backend sends the OTP to the user through an alternative channel.
#.  Backend generates a session ID.
#.  Backend caches the random bytes using the session ID.
#.  Backend sends the session ID to the frontend.
#.  Frontend receives the OTP from the user.
#.  Frontend prompts biometric authentication from the user.
#.  Frontend calls ``signByDeviceIDKeypair`` from the SDK, signing the OTP using the device's private key.
#.  Frontend sends the same data as in step 1, the signature, and the session ID to the backend.
#.  Backend fetches the cached random bytes using the session ID.
#.  Backend recalculates OTP from re-sent data and the random bytes.
#.  Backend fetches the device's public key from its database.
#.  Backend calls ``appstored/verify`` from Kripta Key API, verifying that the OTP was signed using the associated
    private key.
#.  If verification is successful, execute the transaction. Otherwise, stop.
#.  Backend sends the outcome of the operation to the frontend.

.. uml::

    @startuml

    skinparam maxMessageSize 240

    box "Frontend" #FFD700
        participant "User" as user
        participant "Mobile App" as client
        participant "E2EE Mobile SDK" as clientlib
    end box
    box "Backend"
        participant "App Server" as appserver
        participant "Kripta Key" as kk
    end box

    == Transaction Signing ==

    autonumber
    user -> client : enter transaction data
    client -> appserver : submit transaction data
    appserver -> kk : call ""rnd"", generating a random nonce
    kk -> appserver : nonce
    appserver -> appserver : generate session ID and cache nonce with session ID
    appserver -> appserver : combine transaction data and random to form 6-8 digit OTP
    appserver ->] : send OTP via SMS, email, or push notification
    appserver -> client : session ID
    [-> user : receive OTP
    user -> client : enter OTP
    client -> user : prompt local device authentication
    user -> client : authenticate local biometric (face, fingerprint), or local PIN
    client -> clientlib : call ""signByDeviceIDKeypair"", passing in OTP
    clientlib -> client : ECDSA signature
    client -> appserver : send transaction data, signature and session ID
    appserver -> appserver : fetch nonce from cache by using session ID
    appserver -> appserver : recalculate OTP from transaction data and nonce
    appserver -> appserver : fetch device public key from database
    appserver -> kk : call ""appstored/verify"", passing in OTP, signature, and device public key
    kk-> appserver : verification result
    appserver -> appserver : execute transaction
    appserver -> client : status

    @enduml

.. important::

    Note that the session ID generated in step 5 is separate from the session ID used for pre-authentication.

.. warning::

    Similar to :ref:`e2ee-dev-guide/e2ee-prerequisites:e2ee pre-authentication`, the backend **MUST** handle
    caching for the OTP and session ID. It **MUST** also implement a timeout for the cache entries.
    We also recommend invalidating cache entries 5 minutes after their creation.
