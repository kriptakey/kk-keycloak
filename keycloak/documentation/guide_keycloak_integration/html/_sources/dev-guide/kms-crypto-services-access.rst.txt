.. include:: <isonum.txt>

Accessing cryptographic services
================================

Using REST API
--------------

Applications may use REST API to access the cryptographic services offered by Kripta Key. The REST API endpoints
may only be accessed over mutual TLS with a valid certificate. Make sure that the KK-Cryptoservice common name
as written in the certificate (KK-Cryptoservice hostname) has been added to the DNS server.

The request and responses made via REST API are in JSON. For this version of Kripta Key, all API endpoints
are prefixed with ``v24.1/``. The server will return HTTP status 200 on success, and 400 on failure. Additionally,
on error, it also returns a fault response code, which describes the error in more detail for that particular endpoint.
For more details, developers may consult the :doc:`/rest-api-docs/index`.

.. !!! REPLACE WITH APPROPRIATE VERSION ON VERSION UP !!!


Using SDK API
-------------

This section covers the use of the SDK in a number of popular languages to access cryptographic services.

.. The SDK is only available on **Red Hat Enterprise Linux (RHEL) 9.2** operating system.

Kripta Key SDK allows developers to access the Kripta Key API endpoints in their code via TCP without using
the REST API endpoints. Additionally, the SDK also wraps Kripta Key objects into objects native to the language.
This results in cleaner code with less boilerplate that is easy to maintain.

.. note::

    Code examples below contain some predefined sample files and objects:

    #.  CA certificate filename: ``ca.pem``
    #.  Application private key filename: ``Priv.key``
    #.  Application certificate filename: ``App.pem``
    #.  Partition ID: ``1``
    #.  Password: ``Password1!``
    #.  KK-Cryptoservice certificate CN: ``kk-cs.klaviskripta.com``
    #.  KK-Cryptoservice port: ``8084``
    #.  Key IDs:

        *   ``AESMACKey`` for an AES key whose purpose is MAC generation.
        *   ``EncryptionKey`` for an AES or an RSA key whose purpose is encryption.
        *   ``AESEncryptionKey`` for an AES key whose purpose is encryption.
        *   ``RSAEncryptionKey`` for an RSA whose purpose is encryption.
        *   ``RSASigningKey`` for an RSA key whose purpose is signing.
        *   ``ECDSASigningKey`` for an ECDSA key whose purpose is signing.
        *   ``CertSigningKey`` for an RSA or an ECDSA key whose purpose is certificate signing.
        *   ``WrappingKey`` for an AES or an RSA key whose purpose is key wrapping.
        *   ``PermanentKey`` for an AES key whose purpose is encryption, to be used with E2EE services.


PHP
~~~

Kripta Key SDK for PHP is available for PHP versions 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, and 8.2.

.. important::

    Kripta Key SDK for PHP only supports NTS mode of operation.


PHP SDK configuration
^^^^^^^^^^^^^^^^^^^^^

Kripta Key SDK for PHP is an extension that can be loaded by configuring ``php.ini``. To locate it,
run the following command.

.. code-block:: console

    $ php --ini

To set up the SDK, open the ``php.ini`` file with a text editor. Search for the ``Dynamic Extensions`` section,
and add the following line, substituting the appropriate PHP version.

.. code-block:: ini

    extension=libkk-php-x.x.so

If the SDK shared library file is not present at the extension directory, specify an absolute path instead.

.. code-block:: ini

    extension=/path/to/extension/libkk-php-x.x.so


PHP SDK usage
^^^^^^^^^^^^^

Kripta Key SDK for PHP provides a PHP class, ``ConnectionHandler``, that wraps the TCP connection
and exposes the Kripta Key API endpoints as methods. This class needs to be created and initialized
before the developer can make calls to Kripta Key API.

.. code-block:: php

    /**
    * ConnectionHandler object will hold the target host, target port, client certificate,
    * client private key, and CA certificate, once initialized.
    *
    * Note that the certificates and the key must be in PEM format.
    */
    $connectionHandler = new ConnectionHandler();

    /**
    * Initialize the connection by specifying the target host, target port, client certificate,
    * client private key, and CA certificate. This will be stored by the ConnectionHandler object.
    *
    * initializeConnection() will return 0 on success, or error code on failure.
    */
    $kkcsd_host = "127.0.0.1";
    $kkcsd_port = "8084";
    $clientCert = "App.pem";
    $clientPrivKey = "Priv.Key";
    $partitionId = 1;
    $partitionPassword = "Password1!";

    use kk\ConnectionHandler;

    $connectionHandler = new ConnectionHandler();
    $initRes = $connectionHandler->initializeConnection($kkcsd_host, $kkcsd_port, $clientCert, $clientPrivKey, $clientCert);
    if ($initRes->getStatus() != 1) {
        echo ("Connection initialization failed. Error: " . $initRes->getStatus() . "\r\n");
        var_dump($initRes);
        exit(1);
    } else {
        echo ("Connection initialized successfully.\r\n");
    }

The following snippets demonstrate how a developer may use the connection handler object to access
the Kripta Key API endpoints.

*   Logging in

    .. code-block:: php

        /**
        * @brief Log in to a partition using its password.
        *
        * @param partitionId        The partition ID.
        * @param partitionPassword  The partition pasword.
        * @return SDKResponse object, containing the status (1 if success, fault code otherwise) and response (complex array)
        */
        echo ("=============================Login=========================\r\n");

        $loginRes = $connectionHandler->login($partitionId, $partitionPassword);
        var_dump($loginRes->getStatus());
        var_dump($loginRes->getResponse());

        $sessionToken = $loginRes->getResponse()["sessionToken"];
        echo ("Session Token Value = " . $sessionToken);

        echo ("==========================End of Login=====================\r\n");

*   Encrypting data

    .. code-block:: php

        // Create multiple encryption requests
        $aadPrefix = "aad";
        $encryptAESRequest = new EncryptionRequest();
        for ($i = 1; $i < 5; $i++) {
            $aad = $aadPrefix . $i;
            $plaintext = "plaintext for AES Encrypt " . $i;
            $encryptAESRequest->Add($plaintext, $aad);
        }

        echo ("=============================Encrypt AES=========================\r\n");

        $encRes = $connectionHandler->encrypt($partitionId, $sessionToken, $encryptionKeyAES, null, $encryptAESRequest); // null = does not use session key
        $cipherText = $encRes->getResponse()["ciphertext"];
        var_dump($encRes->getStatus());
        var_dump($encRes->getResponse());

        echo ("=========================End of Encrypt AES======================\r\n");

*   Decrypting data

    .. code-block:: php

        // Create multiple decryption requests from the result of AES encryption
        $decryptAESRequest = new DecryptionRequest();
        $encryptCipher = $encRes->getResponse()["ciphertext"]; // get the array of ciphertexts
        $keyVersion = $encRes->getResponse()["keyVersion"]; // get the key version

        $aadCounter = 1;
        foreach ($encryptCipher as $cipher) {
            $sessionKey = array_key_exists("wrappedSessionKey", $cipher) ? $cipher["wrappedSessionKey"] : "";
            $aad = $aadPrefix . $aadCounter++;
            $decryptAESRequest->Add($encryptionKeyAES,$keyVersion,$aad, $cipher["text"], $cipher["iv"], $cipher["mac"], null);
        }

        echo ("=============================Decrypt AES=========================\r\n");

        $decryptAESResponse = $connectionHandler->decrypt($partitionId, $sessionToken,$decryptAESRequest);
        var_dump($decryptAESResponse->getStatus());
        var_dump($decryptAESResponse->getResponse());

        echo ("=============================End Of Decrypt AES=========================\r\n");

.. note::

    Please refer to the PHP SDK API documentation for detailed information about other Kripta Key API interfaces,
    their proper usage, and their code examples.


Java
~~~~

Java SDK configuration
^^^^^^^^^^^^^^^^^^^^^^

Kripta Key SDK for Java is a Java archive (JAR) file that can be loaded into a Java project as a library.
A native library is embedded into the JAR file, compiled for RHEL, to handle the communication between
the KK-Cryptoservice instance and the application. If the developer does not want to use the native library
embedded in the JAR file, the ``LD_LIBRARY_PATH`` environment variable must be set.

.. todo::

    TODO: What value to set the ``LD_LIBRARY_PATH`` environment variable to?

The developer may import the JAR file into an existing Java project via the command line.

.. code-block:: console

    $ javac -classpath kk-server-sdk-1.1.jar:. <App source files>
    $ java -classpath kk-server-sdk-1.1.jar:. <App class name>

The above class path configuration may vary across Java IDEs. For example, on Eclipse, the class path configuration
is found under the menu Project |rarr| Properties |rarr| Java Build Path |rarr| Add External JARs.


Java SDK usage
^^^^^^^^^^^^^^

Kripta Key SDK for Java provides a single pure Java class, ``SDKConnection``, that wraps the TCP connection to
the KK-Cryptoservice instance. Developer simply declare and initialize this class in order to access Kripta Key
endpoints.

.. code-block:: java

    import com.klaviskripta.serversdk.*;

    public class DemoSDK {
        public static void main(String[] args) {
            // Configure connection
            private static final String DEMO_HOSTNAME = "target-kk-cs.com";
            private static final short DEMO_PORT = (short) 8084;
            private static final String DEMO_CLIENT_CERTIFICATE = "/PathToClient/Cert.pem";
            private static final String DEMO_CLIENT_PRIVATE_KEY = "/PathToClientKey/Priv.key";
            private static final String DEMO_CA_CERTIFICATE = "/PathToClient/Cert.pem";

            SDKConnectionBuilder sdkBuilder =
                SDKConnection.newBuilder()
                    .setHost(DEMO_HOSTNAME)
                    .setPort(DEMO_PORT)
                    .setClientCertificate(DEMO_CLIENT_CERTIFICATE)
                    .setClientPrivateKey(DEMO_CLIENT_PRIVATE_KEY)
                    .setCACertificate(DEMO_CA_CERTIFICATE)

            // Instantiate SDK and auto release resource
            try (SDKConnection sdk = sdkBuilder.build()) {
                // Your code here
            } catch (SDKServerException sdkException ) {
                // Handle the exception
            } catch (IOException connectionException ) {
                // Handle if the KMS endpoint is unreachable
            }
        }
    }

The following snippets demonstrate how a developer may use the SDK connection object to access
the Kripta Key API endpoints.

*   Logging in

    .. code-block:: java

        // Login parameters
        private static final int DEMO_PARTITION_ID = 1;
        private static final String DEMO_PARTITION_PASSWORD = "Password1!";

        // Login to get the session token
        System.out.println("Call login API...");

        AuthenticationResult authnResult = sdk.login(DEMO_PARTITION_ID, DEMO_PARTITION_PASSWORD);
        String sessionToken = authnResult.getSessionToken();
        System.out.println("Login successful, result:", authnResult);

*   Encrypting data

    .. code-block:: java

        // Encrypt parameters
        private static final Plaintext[] DEMO_MULTIPLE_PLAINTEXT = new Plaintext[] {
            new Plaintext("Plaintext1", "aad1"),
            new Plaintext("Plaintext2", "aad2")
        };

        private static final String DEMO_KEY_ID = "AESEncryptionKey";

        // Encrypt with SDK
        System.out.println("Encrypting data...");
        EncryptResult encryptResult = sdk.encrypt(DEMO_PARTITION_ID, sessionToken, DEMO_KEY_ID, DEMO_MULTIPLE_PLAINTEXT);

        // Get key version and ciphertext
        int keyVersion = encryptResult.getKeyVersion();
        EncryptResultCiphertext[] ciphertextResults = encryptResult.getCiphertext();

*   Decrypting data

    .. code-block:: java

        // Decrypt all values (in one shot)
        Ciphertext[] ciphertextForDecrypt = new Ciphertext[ciphertextResults.length];
        for (int i = 0; i < ciphertextResults.length; i++) {
            EncryptResultCiphertext ciphertextResult = ciphertextResults[i];
            ciphertextForDecrypt[i] = new Ciphertext(ciphertextResult.getText(), ciphertextResult.getMAC(),
                ciphertextResult.getIV(), DEMO_MULTIPLE_PLAINTEXT[i].getAAD(), keyVersion, DEMO_KEY_ID);
        }

        // Decrypt with SDK
        System.out.println("Decrypting ciphertext...");
        DecryptResult plaintextResult = sdk.decrypt(DEMO_PARTITION_ID, sessionToken, ciphertextForDecrypt);

        print("Decrypted ciphertexts:", plaintextResult.getPlaintext());

.. note::

    Please refer to the Java SDK API documentation for detailed information about other Kripta Key API interfaces,
    their proper usage, and their code examples.


.NET
~~~~

Kripta Key provides an SDK written in C# for the .NET framework. The SDK is thread-safe, making it suitable
for use in multithreaded applications. The SDK is built using .NET 7, and as such, it can only be used with
applications running on .NET 7 or higher.


.NET SDK configuration
^^^^^^^^^^^^^^^^^^^^^^

Kripta Key provides SDKs for both Linux-x64 and Windows-x64 platforms. To use it, developers need to add
the SDK as an assembly reference in their project files --- the ``.csproj`` file for C#, or the ``.vbproj`` file
for VB.NET. In general, integrating the SDK into your project invovles editing the project file and adding
the following lines:

.. code-block:: xml

    <Project Sdk="Microsoft.NET.Sdk">
        ...
        <ItemGroup>
            ...
            <Reference Include="kk-dotnet-sdk">
                <HintPath>/path/to/kk-dotnet-sdk.dll</HintPath>
            </Reference>
            ...
        </ItemGroup>
        ...
    </Project>

The SDK provides two files:

*   ``kk-core.dll`` (for Windows-x64) or ``kk-core.so`` (for Linux-x64)
*   ``kk-dotnet-sdk.dll``

Ensure that when you add ``kk-dotnet-sdk.dll`` as an assembly reference, all files are located in the same directory.


.NET SDK usage
^^^^^^^^^^^^^^

Kripta Key SDK for .NET provides a class, ``ConnectionHandler``, that wraps the TCP connection
and exposes the Kripta Key API endpoints as methods of the object. Developers simply must declare
and initialize this class before accessing the API endpoints.

.. code-block:: c#

    using System;
    using System.IO;
    using System.Reflection;
    using KK.Sdk;
    using KK.Sdk.Structure;

    class KKExampleCode
    {
        public void LoginAndRefreshSession()
        {
            string [] kkConnection = {"kkcsdhost.com", "7000", "/PathToClient/Cert.pem", "/PathToClientKey/Priv.key", "/PathToClient/Cert.pem"};
            uint partitionId = 1;
            var partitionPassword = "Password1!";
            SessionInformation sessionInformation = new SessionInformation();

            using (var conn = new KKConnection(kkConnection[0], short.Parse(kkConnection[1]), kkConnection[2], kkConnection[3], kkConnection[4]))
            {
                // Your code here
            }
        }
    }

The following snippets demonstrate how a developer may use the connection handler object to access
the Kripta Key API endpoints.

*   Logging in

    .. code-block:: c#

        uint partitionId = 1;
        string partitionPassword = "Password1!";
        sessionInformation = conn.Login(partitionId, partitionPassword);

*   Encrypting data

    .. code-block:: c#

        // Encrypt
        string aesEncryptionKey = "AESEncryptionKey";
        string aad = "aad1";

        List<SingleEncryptionRequest> encryptionRequest = new List<SingleEncryptionRequest>();
        for (int j = 0; j < 10; j++)
        {
            string plaintext = "Plaintext" + j.ToString();
            encryptionRequest.Add(new SingleEncryptionRequest(plaintext, aad));
        }

        var encryptedData = conn.Encrypt(partitionId, sessionInformation, aesEncryptionKey, null, encryptionRequest);
        foreach (var iter in encryptedData.data)
            Console.WriteLine("Ciphertext = " + iter.ciphertext + "|" + iter.mac + "|" + iter.iv );

*   Decrypting data

    .. code-block:: c#

        // Decrypt
        List<SingleDecryptionRequest> decryptionRequest = new List<SingleDecryptionRequest>();
        foreach (var iter in encryptedData.data)
            decryptionRequest.Add(new SingleDecryptionRequest(iter.ciphertext, aesEncryptionKey, aad, iter.iv, iter.mac, null, encKeyIdVersion));

        var decryptedData = conn.Decrypt(partitionId, sessionInformation, decryptionRequest);
        for (int k = 0; k < 10; k++)
            Console.WriteLine("Decrypted text = " + decryptedData[k]);

.. note::

    Please refer to the .NET SDK API documentation for detailed information about other Kripta Key API interfaces,
    their proper usage, and their code examples.


Golang
~~~~~~

Kripta Key SDK for Golang enables Golang developers to use the Kripta Key API endpoint in their Golang code, calling 
the API directly through a TCP endpoint without using Rest API. The SDK wraps all Rest API endpoints into Golang objects 
and functions. We provide SDK in Golang version 1.18, and this SDK file is still relevant to use in the newer version of Golang.

Go SDK configuration
^^^^^^^^^^^^^^^^^^^^

Kripta Key provides SDKs for Linux-x64 platforms.
To use our SDK, developers need to import our SDK into their code. Please download our SDK in https://github.com/kriptakey/kk-go-sdk-v24.1
(this link may change at any time, please confirm with support@klaviskripta.com). The native is provided on the github.

*   Installation
    Import the SDK

    .. code-block:: Go

        import "github.com/kriptakey/kk-go-sdk-v2/kriptakey"

    and run ``go get`` without parameters.


Go SDK usage
^^^^^^^^^^^^
Every call to SDK API needs an object named ``ConnectionHandler``, that must be initialized before any call to the SDK is made. 
This is due to the need to store all variables related to the target, which is a KK-Cryptoservice. The variables include certificates, 
the KK-Cryptoservice’s host, and the port information.

.. code-block:: Go

    package main

    import (
        "fmt"
        "log"
        "os"

        "google.golang.org/protobuf/encoding/protojson"

        kk "github.com/kriptakey/kk-go-sdk-v2/kriptakey"
    )

    func main() {

    // Change these constants to the actual value in your
    environment
    DEMO_HOSTNAME := "target-kk-cs.com"
    DEMO_PORT := 8084
    
    DEMO_CLIENT_CERTIFICATE := "/PathToClient/Cert.pem"
    DEMO_CLIENT_PRIVATE_KEY := "/PathToClientKey/Priv.key"
    DEMO_CA_CERTIFICATE := "/PathToClient/Cert.pem"
    
    connection, err := kk.InitializeConnection(
    DEMO_HOSTNAME, DEMO_PORT, DEMO_CLIENT_CERTIFICATE,
    DEMO_CLIENT_PRIVATE_KEY, DEMO_CA_CERTIFICATE)

    if err != nil {
        log.Fatal(err.Error())
        os.Exit(1)
    }


The following snippets demonstrate how a developer may use the connection handler object to access
the Kripta Key API endpoints.

*   Logging in

    .. code-block:: Go

        // Change these constants to the actual value in your environment
        DEMO_HOSTNAME := "target-kk-cs.com"
        DEMO_PORT := 8084

        DEMO_PARTITION_ID := 1
        DEMO_PARTITION_PASSWORD := "Password1!"

        DEMO_CLIENT_CERTIFICATE := "/PathToClient/Cert.pem"
        DEMO_CLIENT_PRIVATE_KEY := "/PathToClientKey/Priv.key"

        connection, err := kk.KK_InitializeConnection(DEMO_HOSTNAME, uint16(DEMO_PORT), DEMO_CLIENT_CERTIFICATE, DEMO_CLIENT_PRIVATE_KEY)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }

        session, err := connection.KK_AppAuthenticate(uint32(DEMO_PARTITION_ID), DEMO_PARTITION_PASSWORD)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }
        fmt.Println("- Session: ", protojson.Format(session))



*   Encrypting data

    .. code-block:: Go

        // Change these constants to the actual value in your environment
        DEMO_KEY_ID := "AESEncryptionKey"

        connection, err := kk.KK_InitializeConnection(DEMO_HOSTNAME, uint16(DEMO_PORT), DEMO_CLIENT_CERTIFICATE, DEMO_CLIENT_PRIVATE_KEY)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }

        session, err := connection.KK_AppAuthenticate(uint32(DEMO_PARTITION_ID), DEMO_PARTITION_PASSWORD)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }
        fmt.Println("- Session: ", protojson.Format(session))

        plaintexts := []*v1_0.APIRequestSingleEncrypt {}
        plaintexts = append(plaintexts, &v1_0.APIRequestSingleEncrypt{
            Text: wrapperspb.String("Klavis"),
            Aad: wrapperspb.String("aad1"),
        })

        encrypted, err := connection.KK_Encrypt_AES(1, session.SessionToken, DEMO_KEY_ID, plaintexts)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }
        fmt.Println("- KK_Encrypt_AES: ", protojson.Format(encrypted))


*   Decrypting data

    .. code-block:: Go

        // Change these constants to the actual value in your environment
        var ciphertexts []*v1_1.APIRequestSingleDecrypt

        for _, el := range encrypted.Ciphertext {
            ciphertexts = append(ciphertexts, &v1_1.APIRequestSingleDecrypt{
                Iv: el.Iv, 
                Mac: el.Mac, 
                Aad: wrapperspb.String("aad1"), 
                KeyId: wrapperspb.String(DEMO_KEY_ID), 
                KeyVersion: encrypted.KeyVersion,
                Text: wrapperspb.String(el.Text),
                WrappedSessionKey: el.WrappedSessionKey,
            })
        }
        decrypted, err := connection.KK_Decrypt(1, session.SessionToken, ciphertexts)
        if err != nil {
            log.Fatal(err.Error())
            os.Exit(1)
        }

        fmt.Println("- KK_Decrypt: ", protojson.Format(decrypted))

.. note::

    Please refer to the Golang SDK API documentation for detailed information about other Kripta Key API interfaces,
    their proper usage, and their code examples.